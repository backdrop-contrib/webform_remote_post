<?php
/**
 * @file
 * Webform Remote Post module.
 *
 * Webform Remote Post is a module that works along the
 * @link http://drupal.org/project/webform Webform @endlink module.
 * It eases the integration between Webforms and other web
 * applications.
 */

/**
 * Implements hook_config_info().
 */
function webform_remote_post_config_info() {
  $prefixes['webform_remote_post.settings'] = array(
    'label' => t('webform_remote_post settings'),
    'group' => t('webform_remote_post'),
  );
  return $prefixes;
} 

/**
 * Implements hook_menu().
 *
 * @see webform_menu_load()
 */
function webform_remote_post_menu() {
  $items = array();

  // Targets list, %webform_menu is an auto-loader wildcard component
  // provided by the webform module (method is webform_menu_load), and it
  // auto-loads a webform node.
  $items['node/%webform_menu/webform/targets'] = array(
    'title' => 'Remote Posts',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('webform_remote_post_targets_form', 1),
    'access callback' => 'user_access',
    'access arguments' => array('admin webform remote posts'),
    'file' => 'includes/webform_remote_post.targets.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  // Delete a target.
  $items['node/%webform_menu/webform/targets/%/delete'] = array(
    'title' => 'Delete repost target',
    'load arguments' => array(1),
    'page arguments' => array(
      'webform_remote_post_target_delete_form_submit',
      1,
      4),
    'access callback' => 'user_access',
    'access arguments' => array('admin webform remote posts'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_webform_submission_insert().
 *
 * Respond to a Webform submission being inserted.
 *
 * Note that this hook is called after a submission has already been saved to
 * the database.
 *
 * This is the main purpose of this module, to emit HTTP POSTs based on the
 * saved webform data.
 *
 * @todo Support of Grid component.
 * @todo Support of File component.
 */
function webform_remote_post_webform_submission_insert($node, $submission) {
  // Skip draft forms:
  if ($submission->is_draft) {
    return;
  }

  // Get this webform node remote targets from the DB:
  $targets = array();
  $targets = db_select('webform_remote_post_targets')
    ->fields('webform_remote_post_targets')
    ->condition('nid', $node->nid)
    ->condition('enabled', 1)
    ->execute()
    ->fetchAllAssoc('tid', PDO::FETCH_ASSOC);

  // Create a map with webform component ID's and the component themselves,
  // handy later on.
  $component_map = array();
  foreach ($node->webform['components'] as $component) {
    $component_map[$component['cid']] = $component;
  }

  // Prepare the submission data for remote posting. Creating a two-dimensional
  // array of form field names and the data.
  $payload = array();
  foreach ($submission->data as $cid => $component_data) {
    $payload[$component_map[$cid]['form_key']] = implode(', ', $component_data['value']);
  }

  // Acceptable server response codes.
  $benign_reponse_codes = array('200', '301', '302', '307');

  // Repost data to each target.
  foreach ($targets as $tid => $target) {

    if($target['type'] == 'json'){
      // JSON Encode the payload.
      $post_data = json_encode($payload);
    
      // Repost data to each target. Begin by setting the
      // options for backdrop_http_request().
      $backdrop_http_request_options = array(
        'method' => 'POST',
        'data' => $post_data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/json', 'Accept' => '*/*'),
      );
    }
    else {
      // URL-encode the payload.
      $post_data = http_build_query($payload);
    
      // Repost data to each target. Begin by setting the
      // options for backdrop_http_request().
      $backdrop_http_request_options = array(
        'method' => 'POST',
        'data' => $post_data,
        'timeout' => 15,
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
      );
    }

    // Where the magic happens:
    $request = backdrop_http_request($target['url'], $backdrop_http_request_options);
    // Log any errors.
    if (isset($request->code) && !in_array($request->code, $benign_reponse_codes)) {
      $log_msg = 'A remote (%type) post to %url by webform node ID %id returned a ';
      $log_msg .= '\'%code\' code, which is a different HTTP response code ';
      $log_msg .= 'than expected. Please make sure that the remote post URL ';
      $log_msg .= 'is correct in the Remote Posts webform settings, and that ';
      $log_msg .= 'the post was received in the remote system.';
      watchdog(
        'webform_remote_post',
        $log_msg,
        array(
          '%id'   => $node->nid,
          '%url'  => $target['url'],
          '%code' => $request->code,
          '%type' => $target['type'],
        ),
        WATCHDOG_WARNING);
    }
  }
}

/**
 * Implements hook_perm().
 */
function webform_remote_post_permission() {
  return array(
    'admin webform remote posts' => array(
      'title' => t('Admin webform remote posts'),
      'description' => t('Grants access to the "Remote Posts" webform settings on all webform content.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function webform_remote_post_theme($existing, $type, $theme, $path) {
  $theme = array(
    // webform_remote_posts.targets.inc.
    'webform_remote_post_targets_form' => array(
      'render element' => 'form',
      'file' => 'includes/webform_remote_post.targets.inc',
    ),
  );
  return $theme;
};
